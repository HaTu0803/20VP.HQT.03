
<!DOCTYPE html>
<html>
<head>
    <title>Danh sách nhân viên</title>
    <style>
        table {
            border-collapse: collapse;
            width: 100%;
            text-align: center;
        }
        th, td {
            padding: 8px;
            text-align: center;
            border-bottom: 1px solid #ddd;
        }
        tr:hover {
            background-color: #f5f5f5;
        }
        .AddButton,.edit-btn, .delete-btn {
            background-color: #FFC7C7;
            border: none;
            padding: 8px 16px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 40px 40px;
            cursor: pointer;
            border-radius: 4px;
            width: 100px; /* Thiết lập chiều rộng là 100px */
        }
        #addButton1,#cancelButton1,#updateButton2, #cancelButton2{
            background-color: #FFC7C7;
            border: none;
            padding: 8px 16px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            cursor: pointer;
            border-radius: 4px;
            width: 100px; /* Thiết lập chiều rộng là 100px */
        }
        #addButton1,#cancelButton1, #updateButton2, #cancelButton2:hover{
            background-color: #FF9F9F;
        }
        .AddButton,.edit-btn:hover, .delete-btn:hover {
            background-color: #FF9F9F;
        }
        .container {
            padding-top: 100px;
        }
        h2 {
            font-weight: bold;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        .modal {
            display: none; /* Ẩn cửa sổ pop-up ban đầu */
            position: fixed; /* Tạo cửa sổ pop-up cố định */
            z-index: 1; /* Đặt độ sâu của cửa sổ pop-up */
            left: 0;
            top: 0;
            width: 100%; /* Đặt chiều rộng của cửa sổ pop-up */
            height: 100%; /* Đặt chiều cao của cửa sổ pop-up */
            overflow: auto; /* Cho phép scroll nội dung trong cửa sổ pop-up */
            background-color: rgba(0,0,0,0.4); /* Tạo hiệu ứng mờ phía sau cửa sổ pop-up */
        }
        #combo-button{
            display: flex;
            justify-content: center;
            align-items: center;
        }
        .modal {
            display: none; /* Hidden by default */
            position: fixed; /* Stay in place */
            z-index: 1; /* Sit on top */
            left: 0;
            top: 0;
            width: 100%; /* Full width */
            height: 100%; /* Full height */
            overflow: auto; /* Enable scroll if needed */
            background-color: rgba(0, 0, 0, 0.4); /* Black background with opacity */
        }
        /* Modal content */
        .modal-content {
            background-color: #fefefe;
            margin: 10% auto; /* 10% from the top and centered */
            padding: 20px;
            border: 1px solid #888;
            width: 50%; /* Could be more or less, depending on screen size */
        }
        /* Close button */
        .close {
            float: right;
            font-size: 28px;
            font-weight: bold;
        }
        .close:hover,
        .close:focus {
            color: #000;
            text-decoration: none;
            cursor: pointer;
        }
    </style>
</head>
<body>
<section class="container">
    <h2>Danh sách nhân viên</h2>
    <table>
        <thead>
        <tr>
            <th>Mã NV</th>
            <th>Họ và tên</th>
        </tr>
        </thead>
        <tbody>
        {{#each this.list}}

            <tr>
                <td>{{MANV}}</td>
                <td>{{TENNV}}</td>
            </tr>
        {{/each}}
        </tbody>


    </table>
    <div id="combo-button">
        <button  class="AddButton" id="AddButton" >Thêm</button>
        <button class="delete-btn"  id="delete-btn">Xóa </button>
        <button class="edit-btn" id="edit-btn">Sửa </button>
    </div>


    <div id="myModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h3>Thêm Nhân Viên</h3>
            <form>
                <label for="manvInput1">Mã Nhân Viên:</label>
                <input type="text" id="manvInput1">
                <br>
                <label for="tennvInput1">Tên Nhân Viên:</label>
                <input type="text" id="tennvInput1">
                <br>

                <button id="addButton1">Thêm</button>
                <button id="cancelButton1">Hủy</button>
            </form>
        </div>
    </div>

    <div id="myModal2" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h3>Sửa Thông Tin Nhân Viên</h3>
            <form>
                <label for="manvInput2">Mã Nhân Viên:</label>
                <input type="text" id="manvInput2">
                <br>
                <label for="tennvInput2">Tên Nhân Viên:</label>
                <input type="text" id="tennvInput2">
                <br>

                <button id="updateButton2">Sửa</button>
                <button id="cancelButton2">Hủy</button>
            </form>
        </div>
    </div>
</section>

</body>
<script>
    document.getElementById("AddButton").addEventListener("click", function() {
        document.getElementById("myModal").style.display = "block";
    });
    document.getElementById("addButton1").addEventListener("click", async function () {
        try {
            // const result = await insertThucDon(madt, matd, mama, tenma, gia);
            var manvlement = document.getElementById("manvInput1");
            var manv = manvlement.value;
            var tennvlement = document.getElementById("tennvInput1");
            var tennv = tennvlement.value;
            // make an AJAX request to the server to get the corresponding Món ăn data
            const xhr = new XMLHttpRequest();
            xhr.open('GET', `/api/themnhanvien?manv=${manv}&tennv=${tennv}`);
            xhr.onload = () => {
                if (xhr.status === 200) {
                    // parse the response data and update the price and description input fields
                } else {
                    // handle errors
                    console.error('Error:', xhr.statusText);
                }
            };
            xhr.onerror = () => {
                console.error('Error:', xhr.statusText);
            };
            xhr.send();
        } catch (err) {
            console.log(err);
            // handle error
        }
        document.getElementById("myModal").style.display = "none";
    });
    document.getElementById("cancelButton1").addEventListener("click", function() {
        document.getElementById("myModal").style.display = "none";
    });


    document.getElementById("edit-btn").addEventListener("click", function() {
        document.getElementById("myModal2").style.display = "block";
    });
    document.getElementById("updateButton2").addEventListener("click", async function () {
        try {
            // const result = await insertThucDon(madt, matd, mama, tenma, gia);
            var manvlement = document.getElementById("manvInput2");
            var manv = manvlement.value;
            var tennvlement = document.getElementById("tennvInput2");
            var tennv = tennvlement.value;

            // make an AJAX request to the server to get the corresponding Món ăn data
            const xhr = new XMLHttpRequest();
            xhr.open('GET', `/api/suanhanvien?manv=${manv}&tennv=${tennv}`);
            xhr.onload = () => {
                if (xhr.status === 200) {
                    // parse the response data and update the price and description input fields
                } else {
                    // handle errors
                    console.error('Error:', xhr.statusText);
                }
            };
            xhr.onerror = () => {
                console.error('Error:', xhr.statusText);
            };
            xhr.send();
        } catch (err) {
            console.log(err);
            // handle error
        }
        document.getElementById("myModal2").style.display = "none";
    });
    document.getElementById("cancelButton2").addEventListener("click", function() {
        try {
            const xhr = new XMLHttpRequest();
            var manvlement = document.getElementById("manvInput2");
            var manv = manvlement.value;
            var tennvlement = document.getElementById("tennvInput2");
            var tennv = tennvlement.value;

            xhr.open('GET', `/api/huycapnhatnv?manv=${manv}&tennv=${tennv}`);
            xhr.onload = () => {
                if (xhr.status === 200) {
                    // parse the response data and update the Mã Thực đơn dropdown options
                    const manvData = JSON.parse(xhr.responseText);
                    tableBody.innerHTML = "";
                    manvData.forEach((item) => {
                        const tr = document.createElement("tr");
                        tr.innerHTML = `
                       <td>${item.MANV}</td>
                      <td>${item.TENNV}</td>
                    `;
                        tableBody.appendChild(tr);
                    });
                    // tenTDInput.value = mamaData[0].TENTDDA;

                    // tenMAInput.value = mamaData[0].TENMA;

                } else {
                    // handle errors
                    console.error('Error:', xhr.statusText);
                }
            };
            xhr.onerror = () => {
                console.error('Error:', xhr.statusText);
            };
            xhr.send();
        } catch (err) {
            console.log(err);
            // ha
        }




        document.getElementById("myModal2").style.display = "none";
    });

</script>
</html>